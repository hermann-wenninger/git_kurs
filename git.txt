config git:
    git config --global user.name 'user name'
    config --global user.email 'user@email.com'
bash:
    pwd #- print working dir
    ls #- list dir 
    cd #- change dir
    tabkey #- auto input
    .. one level up 
    man #- man pages
    clear #- clear terminal
    mkdir #- make dir
    mv #- move file to dir
    cat #- content printer
    rm #- remove file
    . #- dot alias
    up and down key #- terminal history
initialize repo:
    .git  #->folder contains all infos
    git init #-> initialize repo
    git status #-> status of tracked files
    git add file.etxtension #-> add a new file
    git add . #-> add all untraked files
    git diff #-> run diff commad
    git diff --staged #-> to see the changes from add to add
    git commit #-> to commit file
    git commit -v #-> telling the commitinfo
    git commit -m #-> mflag to write commit directly in terminal
    git commit -a #-> commit all changed file
    git commit --amend
    git config --global core.editor "'C:\Users\josef\AppData\Local\Programs\Microsoft VS Code\Code.exe' -w"
    git log #->logdateien
    git log -2 #-> last 2 logs
    git log --pretty #-> pretty
    git log -p #-> the patch made
    git log --pretty=oneline #-> pretty in one line
    git log --pretty=full
    git log --pretty=fuller
    git log --since "2 months" #-> time
    git log --until "1 month"
    git log --graph #-> graphdarstellung

undoing mistakes
    git revert 34567876wrt5fghhh3dj77775. #-> revert commit

cloning repos
    git clone git@github.com:hmannwmann
    git remote
    git remote add new-remote http://new-remote-repo.com
    git fetch #-> fetch inhalte
    git fetch origin
    git merge origin/master master
    git push origin masterg

tagging versioning
    git tag --list<glob> #-> tag "0.1"
    git show "0.1"
    git tag -a "0.1" -m "tagging version"
    git push origin --tags

konzept of branches and forking
    git branch gitKursBranch #-> new gitKursBranch
    git checkout gitKursBranch
    git checkout master

konzept of merging
    first:
        git branch
        git branch newFeature
            or: git checkout -b newFeature
            check branch with: git branch
        git merge <name of branch>
        git branch -d bug-fix #->delete a branch

resolving merge conflicts
    editor in master

remote branches
    git checkout -b branchName  remote/branchName
    git checkout --track origin/branchName
    git checkout branchName
    git branch -vvt
    git fetch
    git push --delete <branchName>

rebasing
    git rebase master
    git log --branches --graph --online
        
        




